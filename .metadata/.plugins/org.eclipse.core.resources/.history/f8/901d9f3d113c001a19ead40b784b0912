/*
 * miniscope.c
 *
 *  Created on: Jan 20, 2020
 *      Author: DBAharoni
 */

#include <cyu3system.h>
#include <cyu3os.h>
#include <cyu3dma.h>
#include <cyu3error.h>
#include <cyu3uart.h>
#include <cyu3i2c.h>
#include <cyu3types.h>
#include <cyu3gpio.h>
#include <cyu3utils.h>

#include "miniscope.h"

// ------------- Initialize globals ----

CyBool_t recording = CyFalse;

CyBool_t endOfFrame = CyFalse;

CyBool_t bnoEnabled = CyFalse;

uint8_t pendingI2CPacket[I2C_PACKET_BUFFER_SIZE][6]; //circular buffer
uint8_t	I2CNumPacketsPending = 0;
uint8_t	I2CPacketNextReadIdx = 0;
uint8_t	I2CPacketNextWriteIdx = 0;
uint8_t	I2CPacketState = 0; // 0 is no no packet incoming. 5 is full packet to trigger packetsPending++

uint8_t quatBNO[8] = {0,0,0,0,0,0,0,0};

uint32_t dFrameNumber = 0;
uint32_t currentTime = 0;
//----------------------------------

void I2CProcessAndSendPendingPacket (void) {
	CyU3PReturnStatus_t apiRetStatus = CY_U3P_SUCCESS;
	CyU3PI2cPreamble_t preamble;
	uint8_t dataBuff[9];
	uint8_t packetLength;
	int i;

	while (I2CNumPacketsPending > 0) {
		if (pendingI2CPacket[I2CPacketNextReadIdx][0]&0x01) {
			// This denotes a full packet of 6 bytes.
			packetLength = 6; // Number of bytes in packet
			preamble.buffer[0] = pendingI2CPacket[I2CPacketNextReadIdx][0]&0xFE; // I2C Address
			preamble.buffer[1] = pendingI2CPacket[I2CPacketNextReadIdx][1]; // usual reg byte
			preamble.length    = 2; //register length + 1 (for address)
			preamble.ctrlMask  = 0x0000;

			for (i=0; i< (packetLength-2);i++){
				dataBuff[i] = pendingI2CPacket[I2CPacketNextReadIdx][i+2];
			}
		}
		else {
			// less than 6 bytes in packet
			packetLength = pendingI2CPacket[I2CPacketNextReadIdx][1]; // Number of bytes in packet
			preamble.buffer[0] = pendingI2CPacket[I2CPacketNextReadIdx][0]; // I2C Address
			preamble.buffer[1] = pendingI2CPacket[I2CPacketNextReadIdx][2]; // usual reg byte
			preamble.length    = 2; //register length + 1 (for address)
			preamble.ctrlMask  = 0x0000;

			for (i=0; i< (packetLength-2);i++){
				dataBuff[i] = pendingI2CPacket[I2CPacketNextReadIdx][i+3];
			}
		}

		apiRetStatus = CyU3PI2cTransmitBytes (&preamble, dataBuff, packetLength-2, 0);

		if (apiRetStatus == CY_U3P_SUCCESS)
			CyU3PBusyWait (100);
		else
			CyU3PDebugPrint (2, "I2C DAC WRITE command failed\r\n");

		I2CPacketNextReadIdx = (I2CPacketNextReadIdx + 1) % I2C_PACKET_BUFFER_SIZE;
		I2CNumPacketsPending--;
	}
}

CyU3PReturnStatus_t readBNO(void) {
	CyU3PReturnStatus_t apiRetStatus = CY_U3P_SUCCESS;
	CyU3PI2cPreamble_t preamble;

	preamble.buffer[0] = BNO055_ADDR & 0xFE; /*  Mask out the transfer type bit. */
	preamble.buffer[1] = 0x20;
	preamble.buffer[2] = BNO055_ADDR | 0x01;
	preamble.length    = 3;
	preamble.ctrlMask  = 0x0002;                                /*  Send start bit after third byte of preamble. */

	apiRetStatus = CyU3PI2cReceiveBytes (&preamble, (uint8_t *)quatBNO, 8, 0);
	if (apiRetStatus == CY_U3P_SUCCESS)
	        CyU3PBusyWait (200); //in us

	return apiRetStatus;
}
